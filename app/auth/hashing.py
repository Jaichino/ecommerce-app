#################################
#    Hashing passwords module   #
#################################


###################################################################################################
# Imports

from passlib.context import CryptContext

###################################################################################################


###################################################################################################
# Define crypt context, using bcrypt scheme

crypt_context = CryptContext(schemes=["bcrypt"], deprecated="auto" )

###################################################################################################


###################################################################################################
# Hash passwords
def hash_password(plain_password: str) -> str:
    hashed_password = crypt_context.hash(plain_password)
    return hashed_password

###################################################################################################


###################################################################################################
# Verify passwords

def check_password(plain_password: str, hashed_password: str):
    return crypt_context.verify(plain_password, hashed_password)

###################################################################################################
